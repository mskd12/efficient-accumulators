use fastcrypto::hash::{EllipticCurveMultisetHash, MultisetHash};

use criterion::{criterion_group, criterion_main, Criterion, BenchmarkId};

// Create a criterion bench for the EllipticCurveMultisetHash insert method
fn bench_insert(c: &mut Criterion) {
    let mut hash = EllipticCurveMultisetHash::default();
    // Pre-insert a value
    hash.insert(b"World");
    let input: Vec<u8> = (0..32).map(|_| rand::random::<u8>()).collect();
    c.bench_with_input(
        BenchmarkId::new("insert", 32), 
        &input, |b, input| {
        b.iter(|| hash.insert(input));
    });
}

use rug::Integer;
use std::str::FromStr;

// An approxiate benchmark of the Update operation in Fig. 2 of https://eprint.iacr.org/2020/1161.pdf.
// That requires three exponentiations and a multiplication. Below we are just benching an exponentiation.
// We use the RSA-2048 modulus from https://en.wikipedia.org/wiki/RSA_numbers#RSA-2048
fn bench_pow_mod(c: &mut Criterion) {
    // A random 2048 bit value simulating the KVAC accumulator (C1 / C2)
    let x = Integer::from_str("19332863797074579894539691290455588855508491814184746641245589933395196038041688759126637839497514177548693529970001980884279186220494499216007382994416040260103433221370003999438250216668336702190916589292583884290791771981425136512715521141530627531423322177152811973781376354788003242347769176729197687414761038447537390872267864738676131225391456181416160446793418910768769272163958190551099322506989526098490651832682975486657019992299361384160434824545060393154691388727112060412404107304390330936891055276219491877273902994816843012289611890072683727008676647526095624600339087403563717852699167860473109230964").unwrap();
    // A random value simulating the value (Obj ID / digest)
    let y = Integer::from(rand::random::<u128>());
    let m = Integer::from_str("2519590847565789349402718324004839857142928212620403202777713783604366202070\
    7595556264018525880784406918290641249515082189298559149176184502808489120072\
    8449926873928072877767359714183472702618963750149718246911650776133798590957\
    0009733045974880842840179742910064245869181719511874612151517265463228221686\
    9987549182422433637259085141865462043576798423387184774447920739934236584823\
    8242811981638150106748104516603773060562016196762561338441436038339044149526\
    3443219011465754445417842402092461651572335077870774981712577246796292638635\
    6373289912154831438167899885040445364023527381951378636564391212010397122822\
    120720357").unwrap();
    c.bench_with_input(
        BenchmarkId::new("pow_mod", 2048), 
        &m, |b, m| {
        b.iter(|| Integer::from(x.pow_mod_ref(&y, m).unwrap()));
    });
}

criterion_group!(benches, bench_insert, bench_pow_mod);

criterion_main!(benches);